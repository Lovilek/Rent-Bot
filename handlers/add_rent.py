from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database.models import Apartment
from database.db import insert_apartment
from utils.validators import normalize_price

router = Router()

class AddApartment(StatesGroup):
    city = State()
    price = State()
    rooms = State()
    description = State()
    address = State()
    phone = State()
    photo = State()

@router.message(F.text == "/add")
async def cmd_add(message: Message, state: FSMContext):
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    await state.set_state(AddApartment.city)

@router.message(AddApartment.city, F.text)
async def step_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip().capitalize())
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(AddApartment.price)



@router.message(AddApartment.price, F.text)
async def step_price(message: Message, state: FSMContext):
    price=normalize_price(message.text)
    if price is None:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
    await state.update_data(price=price)
    await message.answer("üè† –°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?")
    await state.set_state(AddApartment.rooms)


@router.message(AddApartment.rooms, F.text)
async def step_rooms(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç —á–∏—Å–ª–æ–º:")
    await state.update_data(rooms=int(message.text))
    await message.answer("üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await state.set_state(AddApartment.address)

@router.message(AddApartment.address, F.text)
async def step_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(AddApartment.phone)

@router.message(AddApartment.phone, F.text)
async def step_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    await state.set_state(AddApartment.description)


@router.message(AddApartment.description, F.text)
async def step_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):")
    await state.set_state(AddApartment.photo)

@router.message(AddApartment.photo, F.photo | F.text)
async def step_photo(message: Message, state: FSMContext):
    data = await state.get_data()

    if message.photo:
        photo_id = message.photo[-1].file_id
    elif message.text.lower() == "–Ω–µ—Ç":
        photo_id = None
    else:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")

    apartment = Apartment(
        user_id=message.from_user.id,
        city=data["city"],
        price=data["price"],
        rooms=data["rooms"],
        address=data["address"],
        phone=data["phone"],
        description=data["description"],
        photo=photo_id
    )

    await insert_apartment(apartment)
    await message.answer("‚úÖ –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()
